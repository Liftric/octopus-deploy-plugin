package com.liftric.octopusdeploy.extensions

import com.liftric.octopusdeploy.api.OverwriteMode
import okhttp3.logging.HttpLoggingInterceptor
import org.gradle.api.Project
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.file.RegularFileProperty
import org.gradle.api.provider.Property

abstract class OctopusDeployExtension(val project: Project) {
    /**
     * Octopus deploy server API key
     */
    abstract val apiKey: Property<String>

    /**
     * Octopus deploy server URL
     */
    abstract val serverUrl: Property<String>

    /**
     * Enable to calculate the commits for the changelog when uploading build-information
     */
    abstract val generateChangelogSinceLastTag: Property<Boolean>

    /**
     * Prefix / Baseurl for the build-information commit urls.
     */
    abstract val commitLinkBaseUrl: Property<String>

    /**
     * Output folder for files generated by the plugin
     */
    abstract val outputDir: DirectoryProperty

    /**
     * Directory to run the git helpers in. By default the projects root dir
     */
    abstract val gitRoot: DirectoryProperty

    /**
     * Target file (package) which will be uploaded to octopus.
     */
    abstract val pushPackage: RegularFileProperty

    /**
     * Package version.
     */
    abstract val version: Property<String>

    /**
     * Package name
     */
    abstract val packageName: Property<String>

    /**
     * octo build-information OverwriteMode
     */
    abstract val buildInformationOverwriteMode: Property<OverwriteMode?>

    /**
     * octo push OverwriteMode
     */
    abstract val pushOverwriteMode: Property<OverwriteMode?>

    /**
     * Customize the final octopus build-information before uploading
     */
    abstract val buildInformationAddition: Property<BuildInformationCli.() -> Unit>

    /**
     * Configures the http logging of the underlying okhttp client used for octopus api requests
     */
    abstract val httpLogLevel: Property<HttpLoggingInterceptor.Level>

    /**
     * When parsing issues the target issue tracker name is needed. Currently only `Jira` supported
     */
    abstract val issueTrackerName: Property<String>

    /**
     * Enable Jira Issue parsing. This needs the changelog generation enabled to parse the commits there.
     */
    abstract val parseCommitsForJiraIssues: Property<Boolean>

    /**
     * For proper Jira URLs we need the base URL, something like `https://testric.atlassian.net/browse/`.
     */
    abstract val jiraBaseBrowseUrl: Property<String>

    /**
     * Use short (7 char) commit hashes. Default is `true`
     */
    abstract val useShortCommitHashes: Property<Boolean>

    fun gitlab(additional: BuildInformationCli.() -> Unit = {}) {
        buildInformationAddition.set({
            BuildEnvironment = if (System.getenv("CI") != null) {
                "GitLabCI"
            } else {
                "gradle"
            }
            BuildNumber = System.getenv("CI_PIPELINE_IID")
            BuildUrl = System.getenv("CI_PIPELINE_URL")
            Branch = System.getenv("CI_COMMIT_REF_NAME")
            VcsType = "Git"
            VcsRoot = System.getenv("CI_PROJECT_URL")
            VcsCommitNumber = System.getenv("CI_COMMIT_SHORT_SHA")
            VcsCommitUrl =
                "${System.getenv("CI_PROJECT_URL")
                    ?.removeSuffix("/")}/commit/${System.getenv("CI_COMMIT_SHA")}"
            LastModifiedBy = System.getenv("GITLAB_USER_NAME")
            additional()
        })
    }
}
